// Import Edge TTS functions
import { 
  edgeTextToSpeech, 
  edgeTextToSpeechLong, 
  isTextSuitableForEdgeTTS, 
  MAX_EDGE_TTS_LEN,
  VIETNAMESE_VOICES,
  type VietnameseVoice 
} from './edge-tts';

// S·ª≠ d·ª•ng Edge TTS thay v√¨ Google Translate TTS - KH√îNG C√ì GI·ªöI H·∫†N K√ù T·ª∞!
export const MAX_GOOGLE_TRANSLATE_TTS_LEN = MAX_EDGE_TTS_LEN; // Backward compatibility

export async function textToSpeech(text: string, voice?: VietnameseVoice): Promise<Buffer | null> {
  try {
    // S·ª≠ d·ª•ng Edge TTS - c√≥ th·ªÉ x·ª≠ l√Ω text r·∫•t d√†i
    const audioBuffer = await edgeTextToSpeech(text, voice);
    
    if (audioBuffer) {
      console.log("‚úÖ Text-to-speech th√†nh c√¥ng v·ªõi Edge TTS");
      return audioBuffer;
    } else {
      console.error("‚ùå Edge TTS kh√¥ng th·ªÉ t·∫°o audio");
      return null;
    }
    
  } catch (error) {
    console.error("‚ùå L·ªói Edge Text-to-Speech:", error);
    return null;
  }
}

// H√†m g·ª≠i voice message v·ªÅ Telegram
export async function sendVoiceMessage(chatId: number, audioBuffer: Buffer): Promise<boolean> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh");
  }

  try {
    // T·∫°o FormData ƒë·ªÉ g·ª≠i file
    const formData = new FormData();
    formData.append('chat_id', chatId.toString());
    
    // Chuy·ªÉn Buffer th√†nh Uint8Array ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Blob
    const uint8Array = new Uint8Array(audioBuffer);
    formData.append('voice', new Blob([uint8Array], { type: 'audio/mpeg' }), 'voice.mp3');

    // G·ª≠i voice message
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendVoice`, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("L·ªói g·ª≠i voice message:", errorText);
      return false;
    }

    const result = await response.json();
    if (!result.ok) {
      console.error("Telegram API error:", result);
      return false;
    }

    console.log("G·ª≠i voice message th√†nh c√¥ng");
    return true;
    
  } catch (error) {
    console.error("L·ªói g·ª≠i voice message:", error);
    return false;
  }
}

// H√†m g·ª≠i recording action (hi·ªÉn th·ªã "ƒëang ghi √¢m...")
export async function sendRecordingAction(chatId: number): Promise<void> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) return;

  try {
    await fetch(`https://api.telegram.org/bot${botToken}/sendChatAction`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        action: "record_voice", // Hi·ªÉn th·ªã "ƒëang ghi √¢m..."
      }),
    });
  } catch (error) {
    console.error("L·ªói g·ª≠i recording action:", error);
  }
}

// H√†m t·∫°o multiple voice messages cho text d√†i
export async function textToSpeechLong(text: string, voice?: VietnameseVoice): Promise<Buffer[]> {
  try {
    console.log(`üé§ T·∫°o voice cho text d√†i: ${text.length} k√Ω t·ª±`);
    
    // S·ª≠ d·ª•ng Edge TTS ƒë·ªÉ x·ª≠ l√Ω text d√†i
    const audioBuffers = await edgeTextToSpeechLong(text, voice);
    
    console.log(`‚úÖ T·∫°o th√†nh c√¥ng ${audioBuffers.length} audio chunks`);
    return audioBuffers;
    
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o voice cho text d√†i:", error);
    return [];
  }
}

// H√†m ki·ªÉm tra xem text c√≥ ph√π h·ª£p cho TTS kh√¥ng (s·ª≠ d·ª•ng Edge TTS)
export function isTextSuitableForTTS(text: string): boolean {
  return isTextSuitableForEdgeTTS(text);
}

// Edge TTS h·ªó tr·ª£ ti·∫øng Vi·ªát v·ªõi nhi·ªÅu gi·ªçng n√≥i
export const TTS_LANGUAGE = 'vi-VN'; // M√£ ng√¥n ng·ªØ cho Edge TTS
export { VIETNAMESE_VOICES, type VietnameseVoice } from './edge-tts';
