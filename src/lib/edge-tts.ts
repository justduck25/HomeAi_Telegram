// Edge TTS implementation - Thay th·∫ø Google TTS v·ªõi kh·∫£ nƒÉng x·ª≠ l√Ω text d√†i kh√¥ng gi·ªõi h·∫°n
// S·ª≠ d·ª•ng edge-tts-universal package cho Node.js
import { EdgeTTS } from 'edge-tts-universal';

// Kh√¥ng c√≤n gi·ªõi h·∫°n k√Ω t·ª± nh∆∞ Google TTS
export const MAX_EDGE_TTS_LEN = 10000; // Edge TTS c√≥ th·ªÉ x·ª≠ l√Ω text r·∫•t d√†i

// Danh s√°ch gi·ªçng ti·∫øng Vi·ªát c√≥ s·∫µn trong Edge TTS
export const VIETNAMESE_VOICES = [
  'vi-VN-HoaiMyNeural',     // N·ªØ, t·ª± nhi√™n
  'vi-VN-NamMinhNeural',    // Nam, t·ª± nhi√™n
] as const;

export type VietnameseVoice = typeof VIETNAMESE_VOICES[number];

// C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
const DEFAULT_VOICE: VietnameseVoice = 'vi-VN-HoaiMyNeural';

export async function edgeTextToSpeech(
  text: string, 
  voice: VietnameseVoice = DEFAULT_VOICE
): Promise<Buffer | null> {
  try {
    // L√†m s·∫°ch text ƒë·ªÉ tr√°nh l·ªói TTS
    const cleanText = text
      .replace(/[*_`~]/g, '') // Lo·∫°i b·ªè markdown formatting
      .replace(/#{1,6}\s/g, '') // Lo·∫°i b·ªè markdown headers
      .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Chuy·ªÉn links th√†nh text
      .replace(/\n{3,}/g, '\n\n') // Gi·∫£m line breaks
      .replace(/üîç|‚úÖ|‚ùå|üñºÔ∏è|üìä|‚ö°|üéØ|üí°|üîß|üöÄ/g, '') // Lo·∫°i b·ªè emoji
      .trim();

    if (cleanText.length === 0) {
      console.log("Text r·ªóng, kh√¥ng th·ªÉ t·∫°o voice");
      return null;
    }

    console.log(`üé§ ƒêang t·∫°o voice t·ª´ text b·∫±ng Edge TTS (${voice})...`);
    console.log(`üìù Text length: ${cleanText.length} characters`);

    // S·ª≠ d·ª•ng edge-tts-universal
    const tts = new EdgeTTS(cleanText, voice);
    const result = await tts.synthesize();
    
    // Chuy·ªÉn ArrayBuffer th√†nh Buffer
    const audioBuffer = Buffer.from(await result.audio.arrayBuffer());
    
    console.log(`‚úÖ Edge TTS th√†nh c√¥ng: ${audioBuffer.length} bytes`);
    return audioBuffer;
    
  } catch (error) {
    console.error("‚ùå L·ªói Edge TTS:", error);
    return null;
  }
}

// H√†m chia text th√†nh chunks n·∫øu qu√° d√†i (Edge TTS c√≥ th·ªÉ handle text d√†i nh∆∞ng ƒë·ªÉ t·ªëi ∆∞u performance)
export function splitTextForTTS(text: string, maxLength: number = MAX_EDGE_TTS_LEN): string[] {
  if (text.length <= maxLength) {
    return [text];
  }

  const chunks: string[] = [];
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
  
  let currentChunk = '';
  
  for (const sentence of sentences) {
    const trimmedSentence = sentence.trim();
    
    // N·∫øu c√¢u hi·ªán t·∫°i qu√° d√†i, c·∫Øt theo t·ª´
    if (trimmedSentence.length > maxLength) {
      if (currentChunk) {
        chunks.push(currentChunk.trim());
        currentChunk = '';
      }
      
      // Chia c√¢u d√†i theo t·ª´
      const words = trimmedSentence.split(' ');
      let wordChunk = '';
      
      for (const word of words) {
        if ((wordChunk + ' ' + word).length > maxLength) {
          if (wordChunk) {
            chunks.push(wordChunk.trim());
          }
          wordChunk = word;
        } else {
          wordChunk += (wordChunk ? ' ' : '') + word;
        }
      }
      
      if (wordChunk) {
        chunks.push(wordChunk.trim());
      }
    } else {
      // Ki·ªÉm tra xem c√≥ th·ªÉ th√™m c√¢u v√†o chunk hi·ªán t·∫°i kh√¥ng
      const testChunk = currentChunk + (currentChunk ? '. ' : '') + trimmedSentence;
      
      if (testChunk.length > maxLength) {
        if (currentChunk) {
          chunks.push(currentChunk.trim());
        }
        currentChunk = trimmedSentence;
      } else {
        currentChunk = testChunk;
      }
    }
  }
  
  if (currentChunk.trim()) {
    chunks.push(currentChunk.trim());
  }
  
  return chunks.filter(chunk => chunk.length > 0);
}

// H√†m t·∫°o multiple audio files cho text d√†i
export async function edgeTextToSpeechLong(
  text: string,
  voice: VietnameseVoice = DEFAULT_VOICE,
  maxLength: number = MAX_EDGE_TTS_LEN
): Promise<Buffer[]> {
  const chunks = splitTextForTTS(text, maxLength);
  const audioBuffers: Buffer[] = [];
  
  console.log(`üîÑ Chia text th√†nh ${chunks.length} chunks ƒë·ªÉ x·ª≠ l√Ω`);
  
  for (let i = 0; i < chunks.length; i++) {
    console.log(`üé§ ƒêang x·ª≠ l√Ω chunk ${i + 1}/${chunks.length}...`);
    
    const audioBuffer = await edgeTextToSpeech(chunks[i], voice);
    
    if (audioBuffer) {
      audioBuffers.push(audioBuffer);
    } else {
      console.warn(`‚ö†Ô∏è Chunk ${i + 1} kh√¥ng th·ªÉ t·∫°o audio`);
    }
    
    // Delay nh·ªè gi·ªØa c√°c requests ƒë·ªÉ tr√°nh rate limiting
    if (i < chunks.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }
  
  return audioBuffers;
}

// H√†m ki·ªÉm tra xem text c√≥ ph√π h·ª£p cho Edge TTS kh√¥ng
export function isTextSuitableForEdgeTTS(text: string): boolean {
  const cleanText = text.replace(/[*_`~#\[\]()üîç‚úÖ‚ùåüñºÔ∏èüìä‚ö°üéØüí°üîßüöÄ]/g, '').trim();
  
  // Edge TTS c√≥ th·ªÉ x·ª≠ l√Ω text r·∫•t d√†i, ch·ªâ c·∫ßn ki·ªÉm tra c∆° b·∫£n
  if (cleanText.length === 0) {
    return false;
  }
  
  // Ki·ªÉm tra xem c√≥ ph·∫£i ch·ªâ l√† emoji ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng
  const textOnly = cleanText.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '').trim();
  
  return textOnly.length > 0;
}

// Export c√°c h√†m t∆∞∆°ng th√≠ch v·ªõi interface c≈©
export const textToSpeech = edgeTextToSpeech;
export const isTextSuitableForTTS = isTextSuitableForEdgeTTS;
export const TTS_LANGUAGE = 'vi-VN';
export const MAX_TTS_LENGTH = MAX_EDGE_TTS_LEN;
