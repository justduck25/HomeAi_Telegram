import { NextRequest, NextResponse } from "next/server";
import { getAllUsers, getUserByTelegramId } from "@/lib/database";
import { getWeatherData, formatWeatherMessage } from "@/lib/weather";

// H√†m format location name cho UserLocation
function formatUserLocationName(location: { latitude: number; longitude: number; city?: string; country?: string }): string {
  if (location.city && location.country) {
    return `${location.city}, ${location.country}`;
  } else if (location.city) {
    return location.city;
  } else if (location.country) {
    return location.country;
  } else {
    return `${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`;
  }
}

// H√†m g·ª≠i tin nh·∫Øn Telegram
async function sendTelegramMessage(chatId: string, message: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) {
    console.error("TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh");
    return false;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error(`L·ªói g·ª≠i tin nh·∫Øn t·ªõi ${chatId}:`, errorData);
      return false;
    }

    return true;
  } catch (error) {
    console.error(`L·ªói g·ª≠i tin nh·∫Øn t·ªõi ${chatId}:`, error);
    return false;
  }
}

// H√†m l·∫•y danh s√°ch users ƒë√£ b·∫≠t th√¥ng b√°o h√†ng ng√†y
async function getUsersWithDailyNotification() {
  try {
    const allUsers = await getAllUsers();
    
    const users = allUsers.filter(user => 
      user.preferences.dailyWeather && 
      user.location?.latitude && 
      user.location?.longitude
    );
    
    return users;
  } catch (error) {
    console.error('L·ªói l·∫•y danh s√°ch users:', error);
    return [];
  }
}

// Handler cho GET request (cron job)
export async function GET(req: NextRequest) {
  try {
    console.log('üåÖ B·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o th·ªùi ti·∫øt h√†ng ng√†y...');

    // L·∫•y danh s√°ch users ƒë√£ b·∫≠t th√¥ng b√°o
    const users = await getUsersWithDailyNotification();
    
    if (users.length === 0) {
      console.log('Kh√¥ng c√≥ user n√†o b·∫≠t th√¥ng b√°o h√†ng ng√†y');
      return NextResponse.json({ 
        success: true, 
        message: 'Kh√¥ng c√≥ user n√†o b·∫≠t th√¥ng b√°o',
        count: 0 
      });
    }

    console.log(`T√¨m th·∫•y ${users.length} users ƒë√£ b·∫≠t th√¥ng b√°o h√†ng ng√†y`);

    let successCount = 0;
    let failCount = 0;

    // G·ª≠i th√¥ng b√°o cho t·ª´ng user
    for (const user of users) {
      try {
        // Ki·ªÉm tra user c√≥ location kh√¥ng
        if (!user.location) {
          console.log(`User ${user.telegramId} kh√¥ng c√≥ location, b·ªè qua`);
          failCount++;
          continue;
        }

        const { latitude, longitude } = user.location;
        const locationName = formatUserLocationName(user.location);
        
        // L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ Open-Meteo (mi·ªÖn ph√≠, ch√≠nh x√°c)
        const weatherData = await getWeatherData(latitude, longitude);
        
        if (weatherData) {
          // T·∫°o tin nh·∫Øn th·ªùi ti·∫øt v·ªõi format ƒë·∫∑c bi·ªát cho th√¥ng b√°o h√†ng ng√†y
          let weatherMessage = `üåÖ <b>Ch√†o bu·ªïi s√°ng! D·ª± b√°o th·ªùi ti·∫øt h√¥m nay</b>\n\n`;
          weatherMessage += `üìç <b>V·ªã tr√≠:</b> ${locationName}\n\n`;
          
          // Th√™m th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt
          const mainWeatherInfo = formatWeatherMessage(weatherData, locationName);
          // Lo·∫°i b·ªè ti√™u ƒë·ªÅ ƒë·∫ßu v√¨ ƒë√£ c√≥ ti√™u ƒë·ªÅ ri√™ng
          const cleanWeatherInfo = mainWeatherInfo.replace(/üå§Ô∏è.*?\n\n/, '');
          weatherMessage += cleanWeatherInfo;
          
          weatherMessage += `\n\nüí° <i>Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!</i>`;
          weatherMessage += `\nüîï ƒê·ªÉ t·∫Øt th√¥ng b√°o: /daily off`;
          
          // G·ª≠i tin nh·∫Øn
          const sent = await sendTelegramMessage(user.telegramId.toString(), weatherMessage);
          
          if (sent) {
            successCount++;
            console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho user ${user.telegramId}`);
          } else {
            failCount++;
            console.log(`‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o cho user ${user.telegramId}`);
          }
        } else {
          failCount++;
          console.log(`‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho user ${user.telegramId}`);
        }
        
        // Delay nh·ªè gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        failCount++;
        console.error(`L·ªói x·ª≠ l√Ω user ${user.telegramId}:`, error);
      }
    }

    const result = {
      success: true,
      message: 'Ho√†n th√†nh g·ª≠i th√¥ng b√°o th·ªùi ti·∫øt h√†ng ng√†y',
      totalUsers: users.length,
      successCount,
      failCount,
      timestamp: new Date().toISOString()
    };

    console.log('üìä K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o:', result);
    
    return NextResponse.json(result);

  } catch (error) {
    console.error('L·ªói trong cron job daily weather:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// Handler cho POST request (test manual)
export async function POST(req: NextRequest) {
  try {
    const { telegramId } = await req.json();
    
    if (!telegramId) {
      return NextResponse.json({ error: 'telegramId is required' }, { status: 400 });
    }

    console.log(`Testing daily weather for telegramId: ${telegramId}`);

    // L·∫•y th√¥ng tin user
    const user = await getUserByTelegramId(telegramId);
    
    if (!user) {
      return NextResponse.json({ 
        success: false,
        error: 'User kh√¥ng t·ªìn t·∫°i trong database' 
      }, { status: 404 });
    }

    console.log(`User found: ${user.firstName}, role: ${user.role}, dailyWeather: ${user.preferences?.dailyWeather}`);

    // Cho ph√©p admin test ngay c·∫£ khi ch∆∞a b·∫≠t daily weather
    if (user.role !== 'admin' && !user.preferences?.dailyWeather) {
      return NextResponse.json({ 
        success: false,
        error: 'User ch∆∞a b·∫≠t th√¥ng b√°o h√†ng ng√†y. S·ª≠ d·ª•ng /daily on ƒë·ªÉ b·∫≠t.' 
      }, { status: 400 });
    }

    if (!user.location?.latitude || !user.location?.longitude) {
      return NextResponse.json({ 
        success: false,
        error: 'User ch∆∞a c√≥ v·ªã tr√≠ ƒë√£ l∆∞u. S·ª≠ d·ª•ng /location ƒë·ªÉ thi·∫øt l·∫≠p v·ªã tr√≠.' 
      }, { status: 400 });
    }

    // G·ª≠i th√¥ng b√°o test
    const { latitude, longitude } = user.location;
    const locationName = formatUserLocationName(user.location);
    
    const weatherData = await getWeatherData(latitude, longitude);
    
    if (weatherData) {
      let weatherMessage = `üß™ <b>TEST - Th√¥ng b√°o th·ªùi ti·∫øt h√†ng ng√†y</b>\n\n`;
      weatherMessage += `üìç <b>V·ªã tr√≠:</b> ${locationName}\n\n`;
      
      const mainWeatherInfo = formatWeatherMessage(weatherData, locationName);
      const cleanWeatherInfo = mainWeatherInfo.replace(/üå§Ô∏è.*?\n\n/, '');
      weatherMessage += cleanWeatherInfo;
      
      weatherMessage += `\n\nüí° <i>ƒê√¢y l√† tin nh·∫Øn test. Th√¥ng b√°o th·ª±c t·∫ø s·∫Ω ƒë∆∞·ª£c g·ª≠i l√∫c 6:00 s√°ng m·ªói ng√†y.</i>`;
      
      const sent = await sendTelegramMessage(telegramId, weatherMessage);
      
      if (sent) {
        return NextResponse.json({ 
          success: true, 
          message: 'ƒê√£ g·ª≠i th√¥ng b√°o test th√†nh c√¥ng' 
        });
      } else {
        return NextResponse.json({ 
          success: false, 
          error: 'Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o' 
        }, { status: 500 });
      }
    } else {
      return NextResponse.json({ 
        success: false, 
        error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt' 
      }, { status: 500 });
    }

  } catch (error) {
    console.error('L·ªói trong POST daily weather:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Internal server error' 
    }, { status: 500 });
  }
}