import { NextRequest, NextResponse } from "next/server";
import { GoogleGenerativeAI, type Content } from "@google/generative-ai";
import { mongodb, type ContextMessage } from "@/lib/mongodb";

// S·ª≠ d·ª•ng Node.js runtime ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi SDK
export const runtime = "nodejs";

// System prompt ti·∫øng Vi·ªát
const SYS_PROMPT =
  "B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh n√≥i ti·∫øng Vi·ªát c√≥ kh·∫£ nƒÉng ph√¢n t√≠ch ·∫£nh. H√£y tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn, ch√≠nh x√°c v√† h·ªØu √≠ch. Khi ƒë∆∞·ª£c g·ª≠i ·∫£nh, h√£y m√¥ t·∫£ chi ti·∫øt nh·ªØng g√¨ b·∫°n th·∫•y v√† tr·∫£ l·ªùi c√¢u h·ªèi li√™n quan. ∆Øu ti√™n c√¢u tr·∫£ l·ªùi r√µ r√†ng v√† c√≥ v√≠ d·ª• c·ª• th·ªÉ khi c·∫ßn thi·∫øt. Lu√¥n th√¢n thi·ªán v√† l·ªãch s·ª±.";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho Telegram message
type TelegramPhotoSize = {
  file_id: string;
  file_unique_id: string;
  width: number;
  height: number;
  file_size?: number;
};

type TelegramMessage = {
  message_id: number;
  from?: {
    id: number;
    is_bot?: boolean;
    first_name: string;
    username?: string;
  };
  chat: {
    id: number;
    type: string;
  };
  date: number;
  text?: string;
  photo?: TelegramPhotoSize[];
  caption?: string;
};

type TelegramUpdate = {
  update_id: number;
  message?: TelegramMessage;
  edited_message?: TelegramMessage;
};

// ContextMessage ƒë√£ ƒë∆∞·ª£c import t·ª´ @/lib/mongodb

// H√†m l·∫•y message t·ª´ update (c√≥ th·ªÉ l√† message ho·∫∑c edited_message)
function getMessage(update: TelegramUpdate): TelegramMessage | null {
  return update.message ?? update.edited_message ?? null;
}

// H√†m cleanupOldContext ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o MongoDB class

// H√†m g·ª≠i tin nh·∫Øn v·ªÅ Telegram v·ªõi fallback mechanism
async function sendTelegramMessage(chatId: number, text: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) {
    throw new Error("TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh");
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  // Chia tin nh·∫Øn d√†i th√†nh nhi·ªÅu ph·∫ßn (Telegram gi·ªõi h·∫°n 4096 k√Ω t·ª±)
  const maxLength = 4000; // ƒê·ªÉ l·∫°i buffer
  const messages = [];
  
  if (text.length <= maxLength) {
    messages.push(text);
  } else {
    // Chia tin nh·∫Øn theo ƒëo·∫°n vƒÉn ho·∫∑c c√¢u
    const chunks = text.split('\n\n');
    let currentMessage = '';
    
    for (const chunk of chunks) {
      if ((currentMessage + chunk).length <= maxLength) {
        currentMessage += (currentMessage ? '\n\n' : '') + chunk;
      } else {
        if (currentMessage) {
          messages.push(currentMessage);
          currentMessage = chunk;
        } else {
          // Chunk qu√° d√†i, chia theo c√¢u
          const sentences = chunk.split('. ');
          for (const sentence of sentences) {
            if ((currentMessage + sentence).length <= maxLength) {
              currentMessage += (currentMessage ? '. ' : '') + sentence;
            } else {
              if (currentMessage) {
                messages.push(currentMessage);
                currentMessage = sentence;
              } else {
                // C√¢u qu√° d√†i, c·∫Øt c·ª©ng
                messages.push(sentence.substring(0, maxLength));
              }
            }
          }
        }
      }
    }
    
    if (currentMessage) {
      messages.push(currentMessage);
    }
  }

  // G·ª≠i t·ª´ng tin nh·∫Øn
  for (let i = 0; i < messages.length; i++) {
    const message = messages[i];
    
    try {
      // Th·ª≠ g·ª≠i v·ªõi Markdown tr∆∞·ªõc
      let response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
          disable_web_page_preview: true,
        }),
      });

      // N·∫øu l·ªói parse entities, th·ª≠ g·ª≠i l·∫°i v·ªõi text plain
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`L·ªói g·ª≠i tin nh·∫Øn ${i + 1}/${messages.length} v·ªõi Markdown:`, errorText);
        
        if (errorText.includes("can't parse entities") || errorText.includes("Bad Request")) {
          console.log(`Th·ª≠ g·ª≠i l·∫°i tin nh·∫Øn ${i + 1}/${messages.length} v·ªõi plain text...`);
          response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              chat_id: chatId,
              text: message,
              disable_web_page_preview: true,
            }),
          });
          
          if (!response.ok) {
            console.error(`L·ªói g·ª≠i tin nh·∫Øn ${i + 1}/${messages.length} v·ªõi plain text:`, await response.text());
          }
        }
      }
      
      // Delay nh·ªè gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh rate limit
      if (i < messages.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
    } catch (error) {
      console.error(`L·ªói k·∫øt n·ªëi Telegram cho tin nh·∫Øn ${i + 1}/${messages.length}:`, error);
    }
  }
}

// H√†m t·∫£i ·∫£nh t·ª´ Telegram
async function downloadTelegramImage(fileId: string): Promise<Buffer | null> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) return null;

  try {
    // L·∫•y th√¥ng tin file t·ª´ Telegram
    const fileInfoResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`
    );
    const fileInfo = await fileInfoResponse.json();
    
    if (!fileInfo.ok || !fileInfo.result?.file_path) {
      console.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin file:", fileInfo);
      return null;
    }

    // T·∫£i file t·ª´ Telegram
    const fileUrl = `https://api.telegram.org/file/bot${botToken}/${fileInfo.result.file_path}`;
    const imageResponse = await fetch(fileUrl);
    
    if (!imageResponse.ok) {
      console.error("Kh√¥ng th·ªÉ t·∫£i ·∫£nh:", imageResponse.statusText);
      return null;
    }

    return Buffer.from(await imageResponse.arrayBuffer());
  } catch (error) {
    console.error("L·ªói t·∫£i ·∫£nh:", error);
    return null;
  }
}

// H√†m chuy·ªÉn ƒë·ªïi ·∫£nh sang format Gemini
function convertImageToGeminiFormat(imageBuffer: Buffer, mimeType: string = "image/jpeg") {
  return {
    inlineData: {
      data: imageBuffer.toString('base64'),
      mimeType: mimeType
    }
  };
}

// H√†m ph√°t hi·ªán MIME type t·ª´ buffer
function detectMimeType(buffer: Buffer): string {
  // Ki·ªÉm tra magic bytes ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i file
  const header = buffer.subarray(0, 4);
  
  if (header[0] === 0xFF && header[1] === 0xD8 && header[2] === 0xFF) {
    return "image/jpeg";
  } else if (header[0] === 0x89 && header[1] === 0x50 && header[2] === 0x4E && header[3] === 0x47) {
    return "image/png";
  } else if (header[0] === 0x47 && header[1] === 0x49 && header[2] === 0x46) {
    return "image/gif";
  } else if (header[0] === 0x52 && header[1] === 0x49 && header[2] === 0x46 && header[3] === 0x46) {
    return "image/webp";
  }
  
  return "image/jpeg"; // Default fallback
}

// H√†m g·ª≠i typing indicator
async function sendTypingAction(chatId: number) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) return;

  const url = `https://api.telegram.org/bot${botToken}/sendChatAction`;
  
  try {
    await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        action: "typing",
      }),
    });
  } catch (error) {
    console.error("L·ªói g·ª≠i typing action:", error);
  }
}

// Handler ch√≠nh cho POST request
export async function POST(req: NextRequest) {
  try {
    // 1. X√°c th·ª±c webhook b·∫±ng secret token (t·∫°m th·ªùi b·ªè qua)
    const secretHeader = req.headers.get("x-telegram-bot-api-secret-token");
    const expectedSecret = process.env.TELEGRAM_SECRET;
    
    if (expectedSecret && (!secretHeader || secretHeader !== expectedSecret)) {
      console.error("X√°c th·ª±c webhook th·∫•t b·∫°i");
      return NextResponse.json({ ok: false, error: "Forbidden" }, { status: 403 });
    }

    // 2. ƒê·ªçc v√† parse update t·ª´ Telegram
    const update: TelegramUpdate = await req.json();
    const message = getMessage(update);
    
    if (!message?.chat?.id) {
      return NextResponse.json({ ok: true });
    }

    const chatId = message.chat.id;
    const text = (message.text || message.caption || "").trim();
    const hasPhoto = message.photo && message.photo.length > 0;
    
    // B·ªè qua tin nh·∫Øn t·ª´ bot ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
    if (message.from?.is_bot) {
      return NextResponse.json({ ok: true });
    }

    // 3. X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
    if (/^\/start/.test(text)) {
      try {
        if (mongodb.isAvailable()) {
          await mongodb.clearContext(chatId.toString());
        }
      } catch {
        console.log("Kh√¥ng th·ªÉ x√≥a ng·ªØ c·∫£nh t·ª´ MongoDB");
      }
      
      await sendTelegramMessage(
        chatId,
        "ü§ñ Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI s·ª≠ d·ª•ng Google Gemini 2.5 Flash.\n\n" +
        "‚ú® **T√≠nh nƒÉng c·ªßa t√¥i:**\n" +
        "üí¨ Tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát\n" +
        "üñºÔ∏è Ph√¢n t√≠ch v√† m√¥ t·∫£ ·∫£nh\n" +
        "üìù Vi·∫øt b√†i, s√°ng t√°c, gi·∫£i th√≠ch\n" +
        (mongodb.isAvailable() ? "üß† Ghi nh·ªõ cu·ªôc tr√≤ chuy·ªán trong 2 ti·∫øng\n" : "") + "\n" +
        "**C√°ch s·ª≠ d·ª•ng:**\n" +
        "‚Ä¢ G·ª≠i tin nh·∫Øn text ƒë·ªÉ h·ªèi ƒë√°p\n" +
        "‚Ä¢ G·ª≠i ·∫£nh (c√≥ th·ªÉ k√®m c√¢u h·ªèi) ƒë·ªÉ ph√¢n t√≠ch\n" +
        "‚Ä¢ T√¥i s·∫Ω nh·ªõ nh·ªØng g√¨ b·∫°n h·ªèi trong 2 ti·∫øng qua\n\n" +
        "**L·ªánh h·ªØu √≠ch:**\n" +
        "üìù `/reset` - X√≥a b·ªô nh·ªõ v√† b·∫Øt ƒë·∫ßu m·ªõi\n" +
        "üß† `/memory` - Ki·ªÉm tra tr·∫°ng th√°i b·ªô nh·ªõ"
      );
      return NextResponse.json({ ok: true });
    }
    
    if (/^\/reset/.test(text)) {
      try {
        if (mongodb.isAvailable()) {
          await mongodb.clearContext(chatId.toString());
        }
      } catch {
        console.log("Kh√¥ng th·ªÉ x√≥a ng·ªØ c·∫£nh t·ª´ MongoDB");
      }
      
      await sendTelegramMessage(
        chatId,
        "üîÑ ƒê√£ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi!"
      );
      return NextResponse.json({ ok: true });
    }
    
    if (/^\/memory/.test(text)) {
      try {
        if (mongodb.isAvailable()) {
          const stats = await mongodb.getMemoryStats(chatId.toString());
          
          let memoryInfo = `üß† **Tr·∫°ng th√°i b·ªô nh·ªõ:**\n\n`;
          memoryInfo += `üìä T·ªïng s·ªë tin nh·∫Øn: ${stats.totalMessages}\n`;
          memoryInfo += `üë§ Tin nh·∫Øn c·ªßa b·∫°n: ${stats.userMessages}\n`;
          if (stats.oldestMessageTime) {
            const ageHours = (Date.now() - stats.oldestMessageTime) / (1000 * 60 * 60);
            memoryInfo += `‚è∞ Tin nh·∫Øn c≈© nh·∫•t: ${ageHours.toFixed(1)} ti·∫øng tr∆∞·ªõc\n`;
          }
          memoryInfo += `\nüí° T√¥i s·∫Ω t·ª± ƒë·ªông x√≥a tin nh·∫Øn c≈© h∆°n 2 ti·∫øng.`;
          
          await sendTelegramMessage(chatId, memoryInfo);
        } else {
          await sendTelegramMessage(chatId, "‚ùå T√≠nh nƒÉng b·ªô nh·ªõ ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t (c·∫ßn MongoDB database).");
        }
      } catch {
        await sendTelegramMessage(chatId, "‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i b·ªô nh·ªõ.");
      }
      return NextResponse.json({ ok: true });
    }

    // B·ªè qua tin nh·∫Øn tr·ªëng (kh√¥ng c√≥ text v√† kh√¥ng c√≥ ·∫£nh)
    if (!text && !hasPhoto) {
      return NextResponse.json({ ok: true });
    }

    // 4. G·ª≠i typing indicator v√† th√¥ng b√°o cho y√™u c·∫ßu ph·ª©c t·∫°p
    await sendTypingAction(chatId);
    
    // Ph√°t hi·ªán y√™u c·∫ßu ph·ª©c t·∫°p (vi·∫øt b√†i, s√°ng t√°c, ph√¢n t√≠ch d√†i, ho·∫∑c c√≥ ·∫£nh)
    const isComplexRequest = hasPhoto || /vi·∫øt|s√°ng t√°c|ph√¢n t√≠ch|gi·∫£i th√≠ch chi ti·∫øt|m√¥ t·∫£|k·ªÉ|t·∫°o|l√†m b√†i/.test(text.toLowerCase());
    if (isComplexRequest && (text.length > 30 || hasPhoto)) {
      const message = hasPhoto ? 
        "üñºÔ∏è T√¥i ƒëang ph√¢n t√≠ch ·∫£nh c·ªßa b·∫°n, vui l√≤ng ƒë·ª£i 30-60 gi√¢y..." :
        "ü§î ƒê√¢y l√† y√™u c·∫ßu ph·ª©c t·∫°p, t√¥i c·∫ßn th·ªùi gian suy nghƒ©. Vui l√≤ng ƒë·ª£i 30-60 gi√¢y...";
      await sendTelegramMessage(chatId, message);
    }

    // 5. L·∫•y ng·ªØ c·∫£nh h·ªôi tho·∫°i t·ª´ MongoDB
    let context: Content[] = [];

    try {
      if (mongodb.isAvailable()) {
        const savedContext = await mongodb.getContext(chatId.toString());
        if (savedContext && Array.isArray(savedContext)) {
          // Chuy·ªÉn ƒë·ªïi v·ªÅ format Content cho Gemini API
          context = savedContext.map(msg => ({
            role: msg.role,
            parts: msg.parts
          }));
        }
      }
    } catch {
      console.log("MongoDB kh√¥ng kh·∫£ d·ª•ng, b·ªè qua ng·ªØ c·∫£nh");
    }

    // 6. Chu·∫©n b·ªã v√† g·ªçi Gemini AI
    const googleApiKey = process.env.GOOGLE_API_KEY;
    if (!googleApiKey) {
      await sendTelegramMessage(chatId, "‚ùå L·ªói c·∫•u h√¨nh: Kh√¥ng t√¨m th·∫•y Google API Key");
      return NextResponse.json({ ok: true });
    }

    const genAI = new GoogleGenerativeAI(googleApiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

    // X·ª≠ l√Ω ·∫£nh n·∫øu c√≥
    let imagePart = null;
    if (hasPhoto && message.photo) {
      try {
        // L·∫•y ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao nh·∫•t
        const bestPhoto = message.photo.reduce((prev, current) => 
          (prev.file_size || 0) > (current.file_size || 0) ? prev : current
        );
        
        const imageBuffer = await downloadTelegramImage(bestPhoto.file_id);
        if (imageBuffer) {
          const mimeType = detectMimeType(imageBuffer);
          imagePart = convertImageToGeminiFormat(imageBuffer, mimeType);
        } else {
          await sendTelegramMessage(chatId, "‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!");
          return NextResponse.json({ ok: true });
        }
      } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω ·∫£nh:", error);
        await sendTelegramMessage(chatId, "‚ùå C√≥ l·ªói khi x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!");
        return NextResponse.json({ ok: true });
      }
    }

    // T·∫°o parts cho tin nh·∫Øn hi·ªán t·∫°i
    const currentMessageParts = [];
    if (text) {
      currentMessageParts.push({ text });
    }
    if (imagePart) {
      currentMessageParts.push(imagePart);
    }

    // T·∫°o history cho Gemini (bao g·ªìm system prompt)
    const history: Content[] = [
      { role: "user", parts: [{ text: SYS_PROMPT }] },
      ...context,
      { role: "user", parts: currentMessageParts },
    ];

    // Timeout protection ƒë·ªÉ tr√°nh qu√° th·ªùi gian serverless function
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 gi√¢y cho y√™u c·∫ßu ph·ª©c t·∫°p
    
    let reply = "üòÖ Xin l·ªói, t√¥i ƒëang b·∫≠n x·ª≠ l√Ω. B·∫°n th·ª≠ h·ªèi l·∫°i nh√©!";

    try {
      const result = await model.generateContent(
        {
          contents: history,
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 2000, // TƒÉng ƒë·ªÉ h·ªó tr·ª£ b√†i vƒÉn d√†i
          },
        },
        { signal: controller.signal }
      );

      const responseText = result?.response?.text()?.trim();
      if (responseText) {
        reply = responseText;
      }
    } catch (error) {
      console.error("L·ªói g·ªçi Gemini API:", error);
      if (error instanceof Error && error.name === 'AbortError') {
        reply = "‚è±Ô∏è Y√™u c·∫ßu qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi ng·∫Øn g·ªçn h∆°n.";
      } else {
        reply = "ü§î C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi. B·∫°n th·ª≠ h·ªèi l·∫°i nh√©!";
      }
    } finally {
      clearTimeout(timeoutId);
    }

    // 7. L∆∞u ng·ªØ c·∫£nh m·ªõi v√†o MongoDB v·ªõi timestamp (kh√¥ng l∆∞u ·∫£nh ƒë·ªÉ ti·∫øt ki·ªám storage)
    const now = Date.now();
    
    // L·∫•y context hi·ªán t·∫°i v·ªõi timestamp
    let currentContext: ContextMessage[] = [];
    try {
      if (mongodb.isAvailable()) {
        currentContext = await mongodb.getContext(chatId.toString());
      }
    } catch {
      console.log("Kh√¥ng th·ªÉ l·∫•y context hi·ªán t·∫°i");
    }
    
    // Th√™m tin nh·∫Øn m·ªõi v·ªõi timestamp
    const newContextMessages: ContextMessage[] = [
      ...currentContext,
      { 
        role: "user", 
        parts: [{ text: text || (hasPhoto ? "[ƒê√£ g·ª≠i ·∫£nh]" : "") }],
        timestamp: now
      },
      { 
        role: "model", 
        parts: [{ text: reply }],
        timestamp: now
      },
    ];
    
    // L∆∞u context m·ªõi v√†o MongoDB
    try {
      if (mongodb.isAvailable()) {
        await mongodb.saveContext(chatId.toString(), newContextMessages);
      }
    } catch {
      console.log("Kh√¥ng th·ªÉ l∆∞u ng·ªØ c·∫£nh v√†o MongoDB");
    }

    // 8. G·ª≠i ph·∫£n h·ªìi v·ªÅ Telegram
    await sendTelegramMessage(chatId, reply);

    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω webhook:", error);
    // Lu√¥n tr·∫£ v·ªÅ 200 ƒë·ªÉ tr√°nh Telegram retry li√™n t·ª•c
    return NextResponse.json({ ok: true });
  }
}

// Handler cho GET request (ƒë·ªÉ ki·ªÉm tra webhook)
export async function GET() {
  return NextResponse.json({ 
    status: "Telegram Bot Webhook ƒëang ho·∫°t ƒë·ªông",
    timestamp: new Date().toISOString()
  });
}
